1. add dependancy

                <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>io.github.resilience4j</groupId>
			<artifactId>resilience4j-spring-boot2</artifactId>
		</dependency>

2. add it in yml file

management:
  health:
    circuitbreakers:
      enabled: true    
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always      

resilience4j:
  circuitbreaker:
    instances:
      getJobByIdBreaker:  //same  name here of circuit breaker name
        register-health-indicator: true
        event-consumer-buffer-size: 10
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 6s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: COUNT_BASED

4. add circuit breaker

@CircuitBreaker(name = "getJobByIdBreaker", fallbackMethod = "getJobByIdFallBackMethod")


Fall back method return type shoud be same with hardcodded data



Example ->>

@GetMapping("/{jobId}")
	@CircuitBreaker(name = "getJobByIdBreaker", fallbackMethod = "getJobByIdFallBackMethod")
	public ResponseEntity<GetJob> getJobDetailsById(@PathVariable("jobId") Integer jobId)
			throws ResourceNotFoundException {
		GetJob getJobDetails = getPostService.getJobDetailsById(jobId);
		return ResponseEntity.ok(getJobDetails);
	}

	@GetMapping("/findByJobLocation/{jobLocation}")
	public ResponseEntity<List<GetJob>> getJobByLocation(@PathVariable("jobLocation") String jobLocation)
			throws ResourceNotFoundException {
		List<GetJob> getAll = getPostService.getJobByLocation(jobLocation);
		return ResponseEntity.ok(getAll);
	}
	
	public ResponseEntity<GetJob> getJobByIdFallBackMethod(Integer jobId, Exception ex){
		
		log.info("Fallback is executed because service is down : ",ex);
		GetJob getjob=new GetJob();
		
		JobPost jobPost=new JobPost();
		jobPost.setCompanyId(0);
		jobPost.setJobDiscription("job discription");
		jobPost.setJobId(0);
		jobPost.setJobLocations(null);
		jobPost.setJobTitle("jobtitle");
		jobPost.setPostedDate(null);
		jobPost.setRequiredSkills(null);
		jobPost.setTypeId(0);
		jobPost.setWorkExperience("work experience");
		
		Company company=new Company();
		company.setCompanyId(0);
		company.setCompanyLocations(null);
		company.setCompanyName("company name");
		company.setCompanySize(null);
		
		JobType jobType=new JobType();
		jobType.setTypeId(0);
		jobType.setType("type");
		jobType.setAboutType("about type");
		
		getjob.setCompanyDetails(company);
		getjob.setJobPost(jobPost);
		getjob.setJobType(jobType);
		
		return ResponseEntity.ok(getjob);

	}
